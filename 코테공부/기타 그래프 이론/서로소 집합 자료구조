<서로소 집합>
-공통 원소가 없는 두 집합을 의미
ex) {1,2}와 {3,4}는 서로소 관계, {1,2}와 {2,3}은 서로소 관계가 아님

<서로소 집합 자료구조>
-서로소 부분 집합들로 나누어진 원소들의 데이터를 처리하기 위한 자료구조
-서로소 집합 자료규조는 두 종류의 연산을 지원함
    -합집합(Union):두 개의 원소가 포함된 집합을 하나의 집합으로 합치는 연산
    -찾기(Find):특정한 원소가 속한 집합이 어떤 집합인지 알려주는 연산
-서로소 집합 자료구조는 합치기 찾기(Union Find) 자료구조라고 불리기도 함

-여러개의 합치기 연산이 주어졌을 때 서로소 집합 자료구조의 동작 구조는 다음과 같다
    1.합집합(Union)연산을 확인하여, 서로 연결된 두 노드 A,B를 확인한다
        1)A와 B의 루트 노드 A',B' 를 각각 찾습니다
        2)A'를 B'의 부모 노드로 설정한다
    2.모든 합집합(Union)연산을 처리할 때까지 1번의 과정을 반복한다

Ex)
-처리할 연산: Union(1,4), Union(2,3), Union(2,4), Union(5,6)
-[step 1] 노드 1과 노드 4의 루트 노드를 각각 찾음. 현재 루트 노드는 각각
          1과 4이므로 더 큰 번호에 해당하는 루트 노드 4의 부모를 1로 설정
-[stpe 2] 노드 2와 3도 앞에서 한 것과 마찬가지로 진행
-[step 3] 노드 2와 노드 4의 루트 노드를 찾음 현재 루트 노드는 각각 2와 1임
          따라서 더 큰 번호에 해당하는 루트 노드 2의 부모를 1로 설정
-[step 4] 마지막으로 5와6도 수행하여 6의 부모가 5가 됨
이렇게 연결성을 통해 집합으 ㅣ형태를 확인할 수 있음
1,2,3,4는 하나의 집합, 5,6이 하나의 집합이 되는 것
1,2,3,4는 4개가 연결되어 있기 때문, 5,6도 연결되어 있기 때문
이 두 집합은 서로소 관계임 ->연결성을 통해 손쉽게 알 수 있다는 특징

-기본적인 형태의 서로소 집합 자료구조에서는 루트 노노드에 즉시 접근할 수 없음
    -루트 노드를 찾기 위해 부모 테이블을 계속해서 확인하며 거슬러 올라가야함
-다음 예시에서 노드 3의 루트를 찾기 위해서는 노드 2를 거쳐 노드 1에 접근해야 함
    노드번호 1 2 3
    부모    1 1 2      ->3에서 2로, 2에서 1로 가야함

<서로소 집합 자료구조의 기본적인 구현 방법의 문제점>
-합집합(Union) 연산이 편향되게 이루어지는 경우 찾기(Find)함수가 비효율적으로 
 동작함
-최악의 경우에는 찾기(Find)함수가 모든 노드를 다 확인하게 되어 시간 복잡도가
 O(V)가 됨
    -다음과 같이 {1,2,3,4,5}의 총 5개의 원소가 존재하는 상황을 확인해보면
    -수행된 연산들:Union(4,5), Union(3,4),Union(2,3), Union(1,2)
    노드번호: 1 2 3 4 5
    부모     1 1 2 3 4
    5번노드를 찾기위해 find함수 호출하면 5,4,3,2,1 순으로 찾아야 함

서로소 집합 자료구조의 경로 압축>
-찾기(Find) 함수를 최적화하기 위한 방법으로 경로 압축(Path Compression)을
 이용할 수 있다.
    -찾기(Find)함수를 재귀적으로 호추랗ㄴ 뒤에 부모 테이블 값을 바로 갱신한다
    #특정 원소가 속한 집합 찾기
    def find_parent(parent,x):
        #루트 노드가 아니라면 루트 노드를 찾을 때까지 재귀적으로 호출
        if parent[x] != x:
            parent[x] = find_parent(parent,parent[x])
        return parent[x]
-경로 압축 기법을 적용하면 각 노드에 대하여 찾기(Find)함수를 호출한 이후에
 해당 노드의 루트 노드가 바로 부모 노드가 된다
-동일한 예시에 대해서 모든 합집합(Union)함수를 처리한 후 각 원소에 대하여
 찾기(Find)함수를 수행하면 다음과 같이 부모 테이블이 갱신된다
-기본적인 방법에 비하여 시간 복잡도가 개선된다
    노드번호 1 2 3 4 5
    부모    1 1 1 1 1
    찾으면서 바로 갱신을 해주기 때문에 다시 확인했을 때 매우 빠르게 동작함

<서로소 집합을 활용한 사이클 판별>
-서로소 집합은 무방향 그래프 내에서의 사이클을 판별할 때 사용할 수 있다
    -참고로 방향 그래프에서의 사이클 여부는 DFS를 이용하여 판별 할 수 있다
-사이클 판별 알고리즘은 다음과 같다
    1.각 간선을 하나씩 확인하며 두 노드의 루트 노드를 확인한다
        1)루트 노드가 서로 다르다면 두 노드에 대하여 합집합 연산을 수행
        2)루트 노드가 서로 같다면 사이클이 발생한 것
    2.그래프에 포함되어 있는 모든 간선에 대하여 1번 과정을 반복

-동작 과정
    초기단계: ->모든 노드에 대하여 자기 자신을 부모로 설정하는 형태로 초기화
    인덱스  1 2 3
    부모    1 2 3
    간선 (1,2)를 확인 -> 루트 노드는 각각 1,2이므로 더 큰 번호에 해당하는
                      노드 2의 부모를 1로 변경
    간선(1,3)을 확인 -> 마찬가지로 3으 ㅣ부모를 1로 변경
    간선(2,3)을 확인 -> 이미 같은 집합에 속함. 루트 노드가 1로 동일하기 때문
                    ->사이클이 발생한다는 것을 알 수 있음