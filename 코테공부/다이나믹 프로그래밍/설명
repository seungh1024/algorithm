-다이나믹 프로그래밍은 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로
 향상시키는 방법
-이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장하여 다시 계산하지 않게
-다이나믹 프로그래밍의 구현은 일반적으로 두 가지 방식(탑다운과 보텀업)으로 구성

한 번 해결한 것은 다시 계산하여 해결하지 않도록 하는 것
완전탐색에서 좋은 효율로 사용할 수 있음

-다이나믹 프로그래밍은 동적 계획법이라고도 부름
-일반적인 프로그래밍 분야에서의 동적(dynamic)이란 어떤 의미를 가질까?
    -자료구조에서 동적 할당은 프로그램이 실행되는 도중에 실행에 필요한
     메모리를 할당하는 기법을 의미
    -반면에 다이나믹 프로그래밍에서 다이나믹은 별다른 의미 없이 사용된 단어임

-다이나믹 프로그래밍은 문제가 다음의 조건을 만족할 때 사용할 수 있음
    1.최적 부분 구조(Optimal Substructure)
        -큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서
         큰 문제를 해결할 수 있음
    2.중복되는 부분 문제(Overlapping Subproblem)
        -동일한 작은 문제를 반복적으로 해결해야 함

대표적으로 피보나치 수열에 이용할 수 있음
-피보나치 수열은 다음과 같은 형태의 수열이며 다이나믹 프로그래밍으로 효과적으로
 계산이 가능함
    -> 1,1,2,3,5,8,13,21,34,55,89...
-점화식이란 인접한 항들 사이의 관계식을 의미함
-피보나치 수열을 점화식으로 표현하면 다음과 같음
 an = an-1 + an-2, a1 = 1, a2 = 1

-단순 재귀 함수로 피보나치 수열을 해결하면 지수 시간 복잡도를 가지게 됨
-2진 트리 구조이기 때문에 트리의 아래쪽으로 갈수록 같은 함수가 여러번 호출됨
-피보나치 수열의 시간 복잡도는 O(2^n)임
-빅오 표기법을 기준으로 f(30)만 수행하더라도 약 10억가량의 연산을 해야함->비효율적

<피보나치 수열의 효율적인 해법>
-다이나믹 프로그래밍의 사용 조건을 만족하는지 확인
    1.최적 부분 구조: 큰 문제를 작은 문제로 나눌 수 있음
    2.중복되는 부분 문제: 동일한 작은 문제를 반복적으로 해결함
-피보나치 수열은 다이나믹 프로그래밍의 사용 조건을 만족함

1.메모제이션(Memoization) ->탑다운 방식에서 사용되는 방법
-메모이제이션은 다이나믹 프로그래밍을 구현하는 방법 중 하나
-한 번 계산한 결과를 메모리 공간에 메모하는 기법
    -같은 문제를 다시 호출하면 메모했던 결과를 그대로 가져옴
    -값을 기록해 놓는다는 점에서 캐싱이라고도 함

탑다운 vs 보텀업
-탑다운(메모이제이션) 방식은 하향식이라고도 하며 보텀업 방식은 상향식이라고도 함
-다이나믹 프로그래밍의 전형적인 형태는 보텀업 방식임
    -결과 저장용 리스트는 DP 테이블이라고 부름
-엄밀히 말하면 메모이제이션은 이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념을
 의미함
    -따라서 메모이제이션은 다이나믹 프로그래밍에 국한된 개념은 아님
    -한 번 계산된 결과를 담아 놓기만 하고 다이나믹 프로그래밍을 위해
     활용하지 않을 수도 있음

->이미 계산된 결과를 메모리에 저장하면 가장 왼쪽 노드들만 처리하여 구하는 것을
  기대할 수 있음(메모리에 값이 저장되기 때문)
  ->엄청난 가지를 가진 트리를 가지치기 해서 길을 찾기 쉬운 것

즉 메모이제이션 기법을 이용하는 경우 시간 복잡도는 O(N)이 됨

-다이나믹 프로그래밍과 분할 정복은 모두 최적 부분 구조를 가질 때 사용할 수 있음
    -큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를
     해결할 수 있는 상황
-다이나믹 프로그래밍과 분할 정복의 차이점은 부분 문제의 중복임
    -다이나믹 프로그래밍 문제에서는 각 부분 문제들이 서로 영향을 미치며
     부분 문제가 중복됨
    -분할 정복 문제에서는 동일한 부분 문제가 반복적으로 계산되지 않음

분할 정복의 대표적인 예인 퀵 정렬을 보면
->한 번 기준 원소(pivot)가 자리를 변경해서 자리를 잡으면 그 원소의 위치가 변경안됨
->분할 이후에 해당 피벗을 다시 처리하는 부분 문제를 호출하지 않음

<다이나믹 프로그래밍 문제에 접근하는 방법>
-주어진 문제가 다이나믹 프로그래밍 드형임을 파악하는 것이 중요
-가장 먼저 그리디, 구현, 완전 탐색 드으이 아이디어로 문제를 해결할 수 있는지 검토
    -다른 알고리즘으로 풀이 방법이 떠오르지 않으면 다이나믹 프로그래밍을 고려해봄
-일단 재귀 함수로 비효율적인 완전 탐색 프로그램을 작성한 뒤에 (탑다운) 작은 문제에서
 구한 답이 큰 문제에서 그대로 사용될 수 있으면, 코드를 개선하는 방법을 사용할 수 있음
-일반적인 코딩테스트 수준에서는 기본 유형의 다이나믹 프로그래밍 문제가 출제되는 경우
 많음