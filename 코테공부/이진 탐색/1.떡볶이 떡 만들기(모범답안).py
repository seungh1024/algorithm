#문제해결 아이디어
#-적절한 높이를 찾을 때까지 이진 탐색을 수행하여 높이 H를 반복하여 조정
#-현재 이 높이로 자르면 조건을 만족할 수 있는가? 를 확인한 뒤에
# 조건의 만족 여부 '예' 혹은 '아니오'에 따라서 탐색 범위를 좁혀서 해결
#절단기의 높이는 0부터 10억까지의 정수 중 하나임
#   ->이렇게 큰 탐색 범위를 보면 가장 먼저 이진 탐색을 떠올려야 함
#중간점의 값은 시간이 지날수록 최적화된 값임
#과정을 반복하며 얻을 수 있는 떡의 길이 합이 필요한 떡이 길이보다 크거나 같을 때
#중간점의 값을 기록하면 됨

#떡의 개수(N)와 요청한 떡의 길이(M)을 입력
n,m = list(map(int,input().split(' ')))
#각 떡의 개별 높이 정보를 입력
array = list(map(int,input().split()))

#이진 탐색을 위한 시작점과 끝점 설정
start = 0
end = max(array)

#이진 탐색 수행(반복적)
result = 0
while(start <= end):
    total = 0
    mid = (start + end) // 2
    for x in array:
        #잘랐을 때의 떡의 양 계산
        if x > mid:
            total += x - mid
    #떡의 양이 부족한 경우 더 많이 자르기 (왼쪽 부분 탐색)
    if total < m:
        end = mid - 1
    #떡의 양이 충분한 경우 덜 자르기 (오른쪽 부분 탐색)
    else:
        result = mid #최대한 덜 잘랐을 때가 정답이므로 여기서 result기록
        start = mid +1
#정답 출력
print(result)