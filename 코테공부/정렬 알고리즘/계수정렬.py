#특정한 조건이 부합할 때만 사용할 수 있지만 매우 빠르게 동작하는 정렬 알고리즘
#계수 정렬은 데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때 사용 가능
#데이터의 개수가 N,데이터(양수) 중 최댓값이 K일 때 최악의 경우에도
#수행시간 O(N+K)를 보장함

#가장 작은 데이터부터 가장 큰 데이터까지의 범위가 모두 담길 수 있도록 리스트 생성
# 정렬할 데이터 -> 7 5 9 0 3 1 6 2 9 1 4 8 0 5 2
#이 때 인덱스가 데이터가 되는 것이고
#그 개수(count) 값을 하나씩 증가하면서 세는 것
#첫 번째 데이터부터 하나씩 그 값만큼 반복하여 인덱스를 출력하면 됨
#각각의 우너소가 몇번 등장했는지 세는 방식으로 수해오디는 정렬방식

#모든 원소의 값이 0보다 크거나 같다고 가정
array = [7,5,9,0,3,1,6,2,9,1,4,8,0,5,2]
#모든 범위를 포함하는 리스트 선언(모든 값은 0으로 초기화)
count = [0] * (max(array) +1)

for i in range(len(array)):
    count[array[i]]+=1 #각 데이터에 해당하는 인덱스의 값 증가

for i in range(len(count)): #리스트에 기록된 정렬 정보 확인
    for j in range(count[i]):
        print(i,end=' ') #띄어쓰기를 구분으로 등장한 횟수만큼 인덱스 출력

#계수 정렬의 복잡도
#계수 정렬의 시간 복잡도와 공간 복잡도는 모두 O(N+K)
#계수 정렬은 때에 따라서 심각한 비효율성을 초래할 수 있음
    #데이터가 0과 999,999로 단 2개만 존재하는 경우를 생각
#계수 정렬은 동일한 값을 가지는 데이터가 여러 개 등장할 때 효과적으로 사용가능
    #성적의 경우 100점을 맞은 학생이 여러명일 수 있기 때문에 계수 정렬이 효과적