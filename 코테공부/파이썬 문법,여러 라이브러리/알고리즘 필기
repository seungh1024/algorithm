빅오 표기법
-가장 빠르게 증가하는 항만을 고려하는 표기법
 ->함수의 상한만을 나타내게 됨
Ex)연산 횟수가 3N^3 + 5N^2 + 1000000인 알고리즘이 있다고 가정했을 때
    ->빅오 표기법에서는 차수가 가장 큰 항만 남기므로 O(N^3)으로 표현됨(계수도 무시함)
    ->극한 개념이라고 생각 나머지 작은 차수들은 작은 값이 되므로 하나만 고려하는 것


아래로 갈 수록 해당 알고리즘의 성능이 안좋아짐
O(1) : 상수 시간  ->몇 번 수행하면 완료됨
O(logN): 로그 시간  ->logN번 수행하면 안료됨 
 -> 상수, 로그는 많이 사용되니 기억
O(N) : 선형 시간
O(NlogN) : 로그 선형 시간
O(N^2) :이차 시간
O(N^3) : 삼차 시간
O(2^n) : 지수 시간

2중 반복문의 시간 복잡도가 O(N^2)인 것은 아니다
왜냐하면 그 내부에 다른 함수가 호출된다면 그 복잡도도 더해줘야하기 때문이다

가능한 PyPy로 제출하면 좋음 동작 시간이 빠르기 때문
PyPy가 시간,메모리 초과 걸리면 파이썬으로도 제출해보면 됨

시간제한이 1초인 문제를 냈을 때 일반적인 기준은
N의 범위가 500인 경우: 시간복잡도가 O(N^3)인 알고리즘 설계하면 문제풀 수 있음
N의 범위가 2000인 경우: 시간 복잡도가 O(N^2)인 알고맂므 설계하면 풀 수 있음
N의 범위가 100000인 경우: 시간 복잡도가 O(NlogN)인 알고리즘을 설계하면 문제를 풀 수 있음
N의 범위가 10000000인 경우: 시간 복잡도가 O(N)인 알고리즘을 설계하면 문제를 풀 수 있음


