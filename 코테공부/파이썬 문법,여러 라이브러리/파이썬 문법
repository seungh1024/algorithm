주석은 #을 이용함

import time ->시간 관련된 함수 들어있는 것
start_time = time.time()  ->시간 측정 시작

end_time = time.time() ->측정 종료
end_time - start_time 하면 수행 시간 출력됨

round()함수 -> 반올림을 해주는 함수
Ex) round(123.456,2) -> 123.46 
    첫 번째 인수로 반올림 할 숫자를, 두 번째 인수로 반올림 할 자릿수를 넣음
    위의 함수는 셋째 자리에서 반올림 한 것. 첫 째 자리수 부터 0,1,2,3이렇게 올라감

나누기 연산자(/)를 주의해서 사용해야함
파이썬에서 나누기 연산자는 결과를 실수형으로 반환하기 때문
나머지 연산자(%)를 이용해야 할 때가 많음
파이썬에서 몫을 얻기 위해서는 몫 연산자(//)를 사용함
이외에도 거듭 제곱 연산자(**)를 비롯해 다양한 연산자들이 존재함
->굳이 math 라이브러리를 import 하지 않아도 기본적으로 이용 가능한 것이 많음

리스트(배열) 초기화
a = [1,2,3]
뒤의 원소를 출력하려면 a[-1]이렇게 하면 됨
뒤에서 두번쨰는 -2를 넣으면 되는 방식

크기가 N이고 모든 값이 0인 1차원 리스트 초기화
n = 10
a = [0]*n 

리스트에서 연속적인 위치를 갖는 원소들을 가져와야 할 때는 슬라이싱을 이용.
대괄호 안에 콜론(:)을 넣어서 시작 인덱스와 끝 인덱스를 설정할 수 있음
끝 인덱스는 실제 인덱스보다 1을 더 크게 설정함
Ex) a = [1,2,3,4,5,6,7,8,9]
    두 번째 원소부터 네 번째 원소까지 데이터 가져오려면?
    a[1 : 4] 를 하면 됨.
    a[1],a[2],a[3]이 가져와 지는 것

리스트 컴프리헨션
-리스트를 초기화하는 방법 중 하나
    ->대괄호 안에 조건문과 반복문을 적용하여 리스트를 초기화 할 수 있음
Ex) 0부터 9까지의 수를 포함하는 리스트
    array = [i for i in range(10)]
    range(10)이 0부터9까지 를 의미함
    즉 array는 i 인데 이 값이 0부터 9까지라는 것

    0부터 19까지의 수 중에서 홀수만 포함하는 리스트
    array = [ i for i in range(20) if i % 2 ==1]

    1부터 9까지의 수들의 제곱 값을 포함하는 리스트
    array = [i * i for i in range(10)]

리스트 컴프리헨션은 2차원 리스트를 초기화 할 때 효과적으로 사용됨
N X M 크기의 2차원 리스트를 한 번에 초기화 해야 할 때 유용함
Ex) array = [ [0] * m for _ in range(n)]

    잘못된 예시로는
    array = [[0] * m]* n이 있음
    이 코드는 전체 리스트 안에 포함된 각 리스트가 모두 같은 객체로 인식됨
    그래서 특정 위치의 값을 바꾸면 해당 위치 말고 다른 위치의 값도 바뀌는 
    등의 오류가 생길 수 있음

    위에 보면 언더바가 있는데 이는
    반복을 수행하되 반복을 위한 변수의 값을 무시하고자 할 때 언더바(_)를 자주 사용함

    Ex) 1부터 9까지 출력하기는
        summary = 0
        for i in range(1,10):
            summary += i
        print(summary)
        이지만

        "hello world' 5번 출력은
        for _ in range(5):
            print("hello world")
        이렇게 사용함
        헬로 월드를 5번 출력할 때 변수가 필요없기 때문

리스트 관련 메서드
append() = 변수명.append() -> 리스트에 원소를 하나 삽입할 때 사용함
시간 복잡도는 O(1)

sort() = 변수명.sort(), 변수명.sort(reverse = True) ->오름차순 정렬
         reverse = True를 하면 내림차순으로 정렬함
시간 복잡도는 O(NlogN)

reverse() = 변수명.reverse() -> 리스트의 원소의 순소를 모두 뒤집어 놓는다
시간 복잡도는 O(N)

insert() = insert(삽입할 위치 인덱스, 삽입할 값) -> 특정한 인덱스 위치에 원소를 삽입
시간 복잡도는 O(N)

count() = 변수명.count(특정 값) -> 리스트에서 특정한 값을 가지는 데이ㅓㅌ의 개수를 셀 때 사용
시간 복잡도는 O(N)

remove() = 변수명.remove(특정 값) 특정한 값을 갖는 원소를 제거하는데, 값을 가진 원소가
           여러 개면 하나만 제거함.
시간 복잡도는 O(N)

remove가 하나만 제거하는데 특정 값을 가지는 원소를 모두 제거하려면?
EX) a = [1,2,3,4,5,5,5]
remove_set = {3,5} ->이거 형태가 집합 자료형이라고 함
result = [i for i in a if i not in remove_set]

튜플
a = (1,2,3,4,5,6,7,8,9)
네 번째 원소? -> a[3]
두 번쨰 원소부터 네 번째 원소까지 값? -> a[1:4] (인덱스 1,2,3)
인덱스 값을 못바꿈 -> a[2] = 7 이런식으로 하면 에러 발생

사전 자료형 예시
data = dict()
data['사과'] = 'Apple'
data['바나나'] = 'Banana'
data['코코넛'] = 'Coconut'
이러면 사과라는 값에는 Apple 이 매핑,
바나나는 Banana에 매핑됨
키가 사과, 값이 Apple 이런 식임
data를 출력하면 {'사과': 'Apple', '바나나': 'Banana', '코코넛': 'Coconut'}
이렇게 출력됨
-사전 자료형에서는 키와 값을 별도로 뽑아내기 위한 메서드를 지원함
    ->키 데이터만 뽑아서 리스트로 이용할 때 ->keys()함수를 이용
    ->값 데이터만을 뽑아서 리스트로 이용할 때는 values() 함수를 이용
키만 뽑는 예시
->key_list = data.keys()
데이터만 뽑는 예시
->value_list = data.values()
위의 키는 객체 형식으로 반환되기 때문에 출력하면 key_list(['key1','key2'])
이런식으로 출력됨
이를 리스트로 바꾸기 위해서는 list(data.keys())를 이용해서 형 변환을 해야함

집합 자료형
data = set([1,1,2,3,4,4,5]) ->리스트를 set()함수를 이용하여 집합 자료형으로 초기화
결과값은 {1,2,3,4,5} 가 나옴
data = {1,1,2,3,4,4,5} ->이렇게 중괄호 안에 원소를 콤마로 구분해서 초기화도 됨
특정 값을 집합에 추가하려면 add()함수 이용
data.add(6) 을 하면 6이 추가됨
여러개 추가할 시에는
data.update([7,8])하면 7,8이 추가됨
특정 값을 가지는 원소 삭제
data.remove(3) 을 하면 위의 집합에서 3이 사라짐
합집합,교집합,차집합도 이용 가능함
합집합은 a|b, 교집합은 a&b, 차집합은 a-b 이렇게 이용

자주 사용되는 표준 입력 방법
-input() 함수는 한 줄의 문자열을 입력 받는 함수
-map() 함수는 리스트의 모든 원소에 각각 특정한 함수를 적용할 때 사용
-Ex) 공백을 기준으로 구분된 데이터를 입력 바등ㄹ 때는 다음과 같이 사용
    ->list(map(int, input().split()))
-Ex)공백을 기준으로 구분된 데이터의 개수가 많지 않다면, 단순히 다음과 같이 사용함
    ->a,b,c = map(int, input().split())  ->3개보다 많은 입력값이 들어오면 에러
split()을 사용하지 않으면 공백도 포함한 하나의 입력값으로 읽어짐

빠르게 입력 받기
-사용자로부터 입력을 최대한 빠르게 받아야 하는 경우
-파이썬의 경우 sys 라이브러리에 정의되어 있는 sys.stdin.readline() 메서드를 이용함
    -단 입력 후 엔터가 줄 바꿈 기호로 입력되므로 rstrip() 메서드를 함께 사용
실제로 많이 사용되니 기억.
Ex)
import sys
data = sys.stdin.readline().rstrip()
print(data)
이런 방식으로 사용함 -> 한줄로 입력된 데이터가 data에 담기는 것

자주 사용되는 표준 출력 방법
-파이썬에서 기본 출력은 print() 함수를 이용
    -각 변수를 콤마를 이용하여 띄어쓰기로 구분하여 출력할 수 있음
-print()는 기본적으로 출력 이후에 줄바꿈을 수행함
    -줄 바꿈을 원치 않는 경우 'end'속성을 이용할 수 있음
Ex)
print(7, end = " ") ->줄바꿈이 발생하지 않음 end속성에 공백을 넣어서 
                      줄바꿈 대신에 한 칸 띄워줌

f-string 예제
-파이썬 3.6부터 사용 가능하며, 문자열 앞에 접두사 'f'를 붙여 사용함
-중괄호 안에 변수명을 기입하여 간단히 문자열과 정수를 함께 넣을 수 있음
Ex) answer = 7
    print(f"정답은 {answer}입니다.") 이렇게 출력 가능
    기존의 방식은 str(answer)로 형변환을 해주어야 했음

조건문
if x >= 10:
    print("x >= 10")
콜론을 써서 참일 때의 내용을 알려줌
파이썬의 조건문은 if,elif,else 의 형식
->조건문을 사용할 때 elif,else 부분은 경우에 따라서 사용하지 않아도 됨

파이썬의 코드의 블록을 들여쓰기로 지정함 중괄호로 지정하지 않음


비교 연산자
-비교 연산자는 특정한 두 값을 비교할 때 이용할 수 있음
    ->대입 연산자(=)와 같음. 연산자(==)의 차이점에 유의
    -> = 는 값을 대입하는 것
1. X == Y -> X와 Y가 서로 같을 때 True
2. X != Y -> X와 Y가 다를 때 True
3. X > Y -> X가 Y보다 클 때 True
4. X < Y -> X가 Y보다 작을 때 True
5. X >= Y -> X가 Y보다 크거나 같을 때 True
6. X <= Y -> X가 Y보다 작거나 같을 때 True

논리 연산자
-논리 연산자는 논리 값(True/False) 사이의 연산을 수행할 때 사용
1. X and Y -> 둘 다 모두 True 일 때 True
2. X or Y -> 둘 중 하나만 True 이면 True
3. not X -> X가 False 일 때 True

기타 연산자는
-다수의 데이터를 담는 자료형을 위해 in연산자와 not in 연산자가 제공됨
    ->리스트, 튜플, 문자열, 딕셔너리 모두에서 사용이 가능함
1. x in 리스트 -> 리스트 안에 x가 들어있을 때 True
2. x not in 문자열 -> 문자열 안에 x가 들어가 있지 않을 때 True

파이썬의 pass키워드
-아무것도 처리하고 싶지 않을 때 pass 키워드를 사용
Ex) 디버깅 과정에서 일단 조건문의 형태만 만들어 놓고 조건문을 처리하는 부분은 비워놓고 싶은 경우
조건문 등에서 당장에 비워놓고 나중에 작성하는 등 지금은 무시하고 싶을 때 사용함 

조건부 표현식(Conditional Expression)은 if~else문을 한 줄에 작성할 수 있도록 해줌
Ex)result = "Success" if score >= 80 else "Fail"

파이썬은 x>0 and x<20 을 0<x<20 으로 이용할 수 있음

반복문
-특정 소스코드를 반복적으로 실행하고자 할 때 사용
-while,for 있는데 파이썬은 for를 쓸 때 더 간결해지는 경우가 많음(실제 코테의 경우에서)
Ex) while i <= 9:
코테에서 무한루프 쓸 일이 없기 때문에 항상 유의 할 것.
반복문 탈출 여부를 항상 확인할 것

for문
- for 변수 in 리스트:
    실행할 소스코드
의 형태를 가짐
Ex) array =[9,8,7,6,5]
    for x in array:
        print(x)
9,8,7,6,5를 차례대로 방문하여 처리함

-연속적인 값을 차례대로 순회할 때는 range()를 주로 사용
    ->이 때 rnage(시작 값, 끝 값+1)의 형태로 사용
    ->인자를 하나만 넣으면 자동으로 시작 값은 0이 됨
Ex) for i in range(1,10);
        result += 1;

파이썬의 continue 키워드
-반복문에서 남은 코드의 실행을 건너뛰고, 다음 반복을 진행하고자 할 때 continue를 사용
-1부터 9까지의 홀수의 합을 구할 때 다음과 같이 작성할 수 있음
result = 0
for i in range(1,10);
    if i % 2 == 0:
        continue
    result += i
print(result)

파이썬의 break 키워드
-반복문을 즉시 탈출하고자 할 때 break를 사용
-1부터 5까지의 정수를 차례대로 출력하고자 할 때 다음과 같이 작성함
i=1
while True:
    print(i)
    if i == 5:
        break
    i += 1
5가 되면 반복문 탈출

함수 정의하기
-프로그램에는 똑같은 코드가 반복적으로 사용될 때가 많음
-이럴 때 함수를 이용하여 코드 길이를 줄일 수 있음
def 함수명(매개변수):
    실행할 소스코드
    return 반환 값
반환 값이 없을 수도 있다
또한 반환 값을 여러개 가질 수 있음
이 값들을 각각 받으려면 반환하는 갯수와 결과값을 담을 변수의 갯수가 같아야함

global 키워드
-global 키워드로 변수를 지정하면 해당 함수에는 지역 변수를 만들지 않고 함수 바깥에 선언된 변수를 바로 참조함
a = 0
def func():
    global a
    a +=1
이렇게 하면 함수 안에 a를 정의하지 않아도 사용가능한 것임

람다 표현식
-람다 표현식을 이용하면 함수를 간단하게 작성할 수 있음
    -특정한 기능을 수행하는 함수를 한 줄에 작성할 수 있다는 점이 특징
def add(a,b):
    return a+b
print(add(3,7)) ->일반적인 사용법

print((lambda a,b: a+b)(3,7)) ->람다 표현식 사용법

Ex) array = [('홍길동,50),('이순신',32),('아무개',74)]
    
    def my_key(x):
        return x[1]
    print(sorted(array,key=my_key))
    print(sorted(array, key=lambda x: x[1]))
정렬함수 sorted
정렬하는 것은 한 번 쓰고 마는 경우가 많기 때문에 람다로 간단하게 쓰기도 함

list1 = [1,2,3,4,5]
list2 = [6,7,8,9,10]

result = map(lambda a, b: a+b, list1,list2)

print(list(result))
결과 -> [7,9,11,13,15]
map 함수는 각각의 원소에 어떠한 함수를 적용하고자 할 때 사용함
위는 두 개의 리스트는 각 순서에 맞는 원소들의 합을 별도의 리스트에 담는 것
map은 반환을 map 객첼 반환하니 list로 형변환을 해줘야 리스트로 나옴
map함수는 첫 번째 인수로 함수를, 그 뒤에 오는 인자들은 그 함수에 들어갈 매개변수가 들어감
그러면 알아서 각각의 첫 원소부터 매칭을 해서 함수를 적용시킴

